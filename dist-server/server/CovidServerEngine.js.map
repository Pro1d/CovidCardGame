{"version":3,"sources":["../../src/server/CovidServerEngine.js"],"names":["SetOfCards","CovidServerEngine","io","gameEngine","inputOptions","on","executeCommand","bind","cmd","moveToTop","ids","randomizeSubSetOrder","ordering","Array","apply","map","Function","call","Number","i","length","pick_index","Math","trunc","random","order","card","Card","position","TwoVector","model","side","SIDE","BACK","margin","HEIGHT","x","y","angle","addObjectToWorld","orderToRandomize","forEachValidCard","c","push","shift","socket","console","log","playerId","socketId","ServerEngine"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA,IAAIA,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,CAA7D,CAAjB;;IAEqBC,iB;;;;;AACnB,6BAAYC,EAAZ,EAAgBC,UAAhB,EAA4BC,YAA5B,EAA0C;AAAA;;AAAA;;AACxC,2FAAMF,EAAN,EAAUC,UAAV,EAAsBC,YAAtB;AACAD,IAAAA,UAAU,CAACE,EAAX,CAAc,gBAAd,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,+BAAhC;AAFwC;AAGzC;;;;mCAEcC,G,EAAK;AAClB,UAAIA,GAAG,CAACA,GAAJ,KAAY,WAAhB,EAA6B;AAC3B,aAAKL,UAAL,CAAgBM,SAAhB,CAA0BD,GAAG,CAACE,GAA9B;AACA,aAAKC,oBAAL,CAA0BH,GAAG,CAACE,GAA9B;AACD;AACF;;;4BAEO;AACN,mFADM,CAGN;;;AACA,UAAIE,QAAQ,GAAGC,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBd,UAAlB,EAA8Be,GAA9B,CAAkCC,QAAQ,CAACC,IAA3C,EAAiDC,MAAjD,CAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,UAAU,CAACoB,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,YAAIE,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBxB,UAAU,CAACoB,MAAX,GAAoBD,CAArC,CAAX,IAAsDA,CAAvE;AACA,YAAIM,KAAK,GAAGb,QAAQ,CAACS,UAAD,CAApB;AACAT,QAAAA,QAAQ,CAACS,UAAD,CAAR,GAAuBT,QAAQ,CAACO,CAAD,CAA/B;AACA,YAAIO,IAAI,GAAG,IAAIC,aAAJ,CAAS,KAAKxB,UAAd,EAA0B,IAA1B,EAAgC;AAAEyB,UAAAA,QAAQ,EAAE,IAAIC,kBAAJ,CAAc,CAAd,EAAiB,CAAjB;AAAZ,SAAhC,CAAX;AACAH,QAAAA,IAAI,CAACI,KAAL,GAAa9B,UAAU,CAACmB,CAAD,CAAvB;AACAO,QAAAA,IAAI,CAACK,IAAL,GAAYJ,cAAKK,IAAL,CAAUC,IAAtB;AACAP,QAAAA,IAAI,CAACD,KAAL,GAAaA,KAAb;AACA,YAAMS,MAAM,GAAGP,cAAKQ,MAAL,GAAc,IAA7B;AACAT,QAAAA,IAAI,CAACE,QAAL,CAAcQ,CAAd,GAAkBd,IAAI,CAACE,MAAL,MAAiB,MAAMU,MAAM,GAAG,CAAhC,IAAqCA,MAAvD;AACAR,QAAAA,IAAI,CAACE,QAAL,CAAcS,CAAd,GAAkBf,IAAI,CAACE,MAAL,MAAiB,MAAMU,MAAM,GAAG,CAAhC,IAAqCA,MAAvD;AACAR,QAAAA,IAAI,CAACY,KAAL,GAAahB,IAAI,CAACE,MAAL,KAAgB,GAA7B;AAEA,aAAKrB,UAAL,CAAgBoC,gBAAhB,CAAiCb,IAAjC;AACD;AACF,K,CAED;;;;yCACqBhB,G,EAAK;AACxB,UAAI8B,gBAAgB,GAAG,EAAvB;AACA,WAAKrC,UAAL,CAAgBsC,gBAAhB,CAAiC/B,GAAjC,EAAsC,UAACgC,CAAD,EAAO;AAAEF,QAAAA,gBAAgB,CAACG,IAAjB,CAAsBD,CAAC,CAACjB,KAAxB;AAAiC,OAAhF;AACA,WAAKtB,UAAL,CAAgBsC,gBAAhB,CAAiC/B,GAAjC,EAAsC,UAACgC,CAAD,EAAO;AAC3C,YAAIrB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBgB,gBAAgB,CAACpB,MAA5C,CAAjB;AACAsB,QAAAA,CAAC,CAACjB,KAAF,GAAUe,gBAAgB,CAACnB,UAAD,CAA1B;AACAmB,QAAAA,gBAAgB,CAACnB,UAAD,CAAhB,GAA+BmB,gBAAgB,CAAC,CAAD,CAA/C;AACAA,QAAAA,gBAAgB,CAACI,KAAjB;AACD,OALD;AAMD;;;sCAEiBC,M,EAAQ;AACxB,+FAAwBA,MAAxB;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAkBF,MAAM,CAACG,QAArC;AACD;;;yCAEoBC,Q,EAAUD,Q,EAAU;AACvC,kGAA2BC,QAA3B,EAAqCD,QAArC;;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAgBC,QAA5B;AACD;;;;EAvD4CE,qB;;;AAwD9C","sourcesContent":["import { ServerEngine, TwoVector } from 'lance-gg';\nimport Card from '../common/Card';\n\n// cards set definition\nlet SetOfCards = [0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9];\n\nexport default class CovidServerEngine extends ServerEngine {\n  constructor(io, gameEngine, inputOptions) {\n    super(io, gameEngine, inputOptions);\n    gameEngine.on('executeCommand', this.executeCommand.bind(this));\n  }\n\n  executeCommand(cmd) {\n    if (cmd.cmd === \"randomize\") {\n      this.gameEngine.moveToTop(cmd.ids);\n      this.randomizeSubSetOrder(cmd.ids);\n    }\n  }\n\n  start() {\n    super.start();\n\n    // add card object to world, random order, random position\n    let ordering = Array.apply(null, SetOfCards).map(Function.call, Number);\n    for (let i = 0; i < SetOfCards.length; i++) {\n      let pick_index = Math.trunc(Math.random() * (SetOfCards.length - i)) + i;\n      let order = ordering[pick_index];\n      ordering[pick_index] = ordering[i];\n      let card = new Card(this.gameEngine, null, { position: new TwoVector(0, 0) });\n      card.model = SetOfCards[i];\n      card.side = Card.SIDE.BACK;\n      card.order = order;\n      const margin = Card.HEIGHT / 1.41;\n      card.position.x = Math.random() * (800 - margin * 2) + margin;\n      card.position.y = Math.random() * (800 - margin * 2) + margin;\n      card.angle = Math.random() * 360;\n\n      this.gameEngine.addObjectToWorld(card);\n    }\n  }\n\n  // The ids to randomized must have been moveToTop before calling this method\n  randomizeSubSetOrder(ids) {\n    let orderToRandomize = [];\n    this.gameEngine.forEachValidCard(ids, (c) => { orderToRandomize.push(c.order); });\n    this.gameEngine.forEachValidCard(ids, (c) => {\n      let pick_index = Math.trunc(Math.random() * orderToRandomize.length);\n      c.order = orderToRandomize[pick_index];\n      orderToRandomize[pick_index] = orderToRandomize[0];\n      orderToRandomize.shift();\n    });\n  }\n\n  onPlayerConnected(socket) {\n    super.onPlayerConnected(socket);\n    console.log(\"player joined: \"+socket.playerId);\n  }\n\n  onPlayerDisconnected(socketId, playerId) {\n    super.onPlayerDisconnected(socketId, playerId);\n    console.log(\"player left: \"+playerId);\n  }\n};\n\n"],"file":"CovidServerEngine.js"}