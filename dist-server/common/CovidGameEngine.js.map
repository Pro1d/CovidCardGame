{"version":3,"sources":["../../src/common/CovidGameEngine.js"],"names":["CovidGameEngine","options","on","gameLogic","bind","serializer","registerClass","Card","ids","functor","forEach","id","cardObj","world","queryObject","instanceType","commaSeparatedId","split","idStr","push","parseInt","inputData","playerId","isServer","input","console","log","action","shift","sideToFlip","forEachValidCard","getIds","side","flip","moveToTop","delta","dx","parseFloat","dy","px","position","x","py","y","Math","min","max","angle","deltaAngle","turnLeft","turnRight","emit","cmd","xmin","xmax","ymin","ymax","orderToUpdate","order","cards","queryObjects","count","found","otu","length","SetOfCards","GameEngine"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;IACqBA,e;;;;;AAEnB,2BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,yFAAMA,OAAN,GADmB,CAEnB;AAEA;;AACA,UAAKC,EAAL,CAAQ,UAAR,EAAoB,MAAKC,SAAL,CAAeC,IAAf,+BAApB;;AALmB;AAMpB;;;;oCAIeC,U,EAAY;AAC1BA,MAAAA,UAAU,CAACC,aAAX,CAAyBC,aAAzB;AACD;;;gCAEW,CACV;AACA;AACD;;;qCAEgBC,G,EAAKC,O,EAAS;AAAA;;AAC7BD,MAAAA,GAAG,CAACE,OAAJ,CAAY,UAACC,EAAD,EAAQ;AAClB,YAAMC,OAAO,GAAG,MAAI,CAACC,KAAL,CAAWC,WAAX,CAAuB;AAACH,UAAAA,EAAE,EAAGA,EAAN;AAAUI,UAAAA,YAAY,EAAER;AAAxB,SAAvB,CAAhB;;AACA,YAAIK,OAAJ,EACEH,OAAO,CAACG,OAAD,CAAP;AACH,OAJD;AAKD;;;2BAEMI,gB,EAAkB;AACvB,UAAIR,GAAG,GAAG,EAAV;AACAQ,MAAAA,gBAAgB,CAACC,KAAjB,CAAuB,GAAvB,EAA4BP,OAA5B,CAAoC,UAACQ,KAAD,EAAW;AAAEV,QAAAA,GAAG,CAACW,IAAJ,CAASC,QAAQ,CAACF,KAAD,CAAjB;AAA4B,OAA7E;AACA,aAAOV,GAAP;AACD;;;iCAEYa,S,EAAWC,Q,EAAUC,Q,EAAU;AAC1C,wFAAmBF,SAAnB,EAA8BC,QAA9B;;AAEA,UAAIE,KAAK,GAAGH,SAAS,CAACG,KAAV,CAAgBP,KAAhB,CAAsB,GAAtB,CAAZ;AACA,UAAIM,QAAJ,EAAcE,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEd,UAAMG,MAAM,GAAGH,KAAK,CAACI,KAAN,EAAf;;AACA,UAAID,MAAM,KAAK,MAAf,EAAuB;AACrB;AACA,YAAIE,UAAU,GAAG,IAAjB;AACA,aAAKC,gBAAL,CAAsB,KAAKC,MAAL,CAAYP,KAAK,CAACI,KAAN,EAAZ,CAAtB,EAAkD,UAAChB,OAAD,EAAa;AAC7D,cAAIiB,UAAU,KAAK,IAAnB,EAAyB;AACvBA,YAAAA,UAAU,GAAGjB,OAAO,CAACoB,IAArB;AACD;;AACD,cAAIpB,OAAO,CAACoB,IAAR,KAAiBH,UAArB,EACEjB,OAAO,CAACqB,IAAR;AACH,SAND;AAOD,OAVD,MAUO,IAAIN,MAAM,KAAK,KAAf,EAAsB;AAC3B,YAAInB,GAAG,GAAG,KAAKuB,MAAL,CAAYP,KAAK,CAACI,KAAN,EAAZ,CAAV;AACA,aAAKM,SAAL,CAAe1B,GAAf;AACD,OAHM,MAGA,IAAImB,MAAM,KAAK,MAAf,EAAuB;AAC5B,YAAMQ,KAAK,GAAGX,KAAK,CAACI,KAAN,GAAcX,KAAd,CAAoB,GAApB,CAAd;AACA,YAAMmB,EAAE,GAAGC,UAAU,CAACF,KAAK,CAAC,CAAD,CAAN,CAArB;AACA,YAAMG,EAAE,GAAGD,UAAU,CAACF,KAAK,CAAC,CAAD,CAAN,CAArB;AACA,aAAKL,gBAAL,CAAsB,KAAKC,MAAL,CAAYP,KAAK,CAACI,KAAN,EAAZ,CAAtB,EAAkD,UAAChB,OAAD,EAAa;AAC7D,cAAM2B,EAAE,GAAG3B,OAAO,CAAC4B,QAAR,CAAiBC,CAAjB,GAAqBL,EAAhC;AACA,cAAMM,EAAE,GAAG9B,OAAO,CAAC4B,QAAR,CAAiBG,CAAjB,GAAqBL,EAAhC;AACA1B,UAAAA,OAAO,CAAC4B,QAAR,CAAiBC,CAAjB,GAAqBG,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASP,EAAT,EAAa,CAAb,CAAT,EAA0B,MAAI,CAA9B,CAArB;AACA3B,UAAAA,OAAO,CAAC4B,QAAR,CAAiBG,CAAjB,GAAqBC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASJ,EAAT,EAAa,CAAb,CAAT,EAA0B,MAAI,CAA9B,CAArB;AACD,SALD;AAMD,OAVM,MAUA,IAAIf,MAAM,KAAK,aAAf,EAA8B;AACnC,YAAMoB,KAAK,GAAGV,UAAU,CAACb,KAAK,CAACI,KAAN,EAAD,CAAxB;AACA,aAAKE,gBAAL,CAAsB,KAAKC,MAAL,CAAYP,KAAK,CAACI,KAAN,EAAZ,CAAtB,EAAkD,UAAChB,OAAD,EAAa;AAC7DA,UAAAA,OAAO,CAACmC,KAAR,GAAgBA,KAAhB;AACD,SAFD;AAGD,OALM,MAKA,IAAIpB,MAAM,IAAI,QAAd,EAAwB;AAC7B,YAAMqB,UAAU,GAAGX,UAAU,CAACb,KAAK,CAACI,KAAN,EAAD,CAA7B;AACA,aAAKE,gBAAL,CAAsB,KAAKC,MAAL,CAAYP,KAAK,CAACI,KAAN,EAAZ,CAAtB,EAAkD,UAAChB,OAAD,EAAa;AAC7D,cAAIoC,UAAU,GAAG,CAAjB,EACEpC,OAAO,CAACqC,QAAR,CAAiB,CAACD,UAAlB,EADF,KAGEpC,OAAO,CAACsC,SAAR,CAAkBF,UAAlB;AACH,SALD;AAMD,OARM,MAQA,IAAIrB,MAAM,IAAI,WAAd,EAA2B;AAChC,YAAInB,IAAG,GAAG,KAAKuB,MAAL,CAAYP,KAAK,CAACI,KAAN,EAAZ,CAAV;;AACA,aAAKuB,IAAL,CAAU,gBAAV,EAA4B;AAACC,UAAAA,GAAG,EAAC,WAAL;AAAkB5C,UAAAA,GAAG,EAAEA;AAAvB,SAA5B;AACD,OAHM,MAGA,IAAImB,MAAM,IAAI,QAAd,EAAwB;AAC7B,YAAI0B,IAAI,GAAG,GAAX;AAAA,YAAgBC,IAAI,GAAG,CAAvB;AAAA,YAA0BC,IAAI,GAAG,GAAjC;AAAA,YAAsCC,IAAI,GAAG,CAA7C;;AACA,YAAIhD,KAAG,GAAG,KAAKuB,MAAL,CAAYP,KAAK,CAACI,KAAN,EAAZ,CAAV;;AACA,aAAKE,gBAAL,CAAsBtB,KAAtB,EAA2B,UAACI,OAAD,EAAa;AACtCyC,UAAAA,IAAI,GAAGT,IAAI,CAACC,GAAL,CAASjC,OAAO,CAAC4B,QAAR,CAAiBC,CAA1B,EAA6BY,IAA7B,CAAP;AACAE,UAAAA,IAAI,GAAGX,IAAI,CAACC,GAAL,CAASjC,OAAO,CAAC4B,QAAR,CAAiBG,CAA1B,EAA6BY,IAA7B,CAAP;AACAD,UAAAA,IAAI,GAAGV,IAAI,CAACE,GAAL,CAASlC,OAAO,CAAC4B,QAAR,CAAiBC,CAA1B,EAA6Ba,IAA7B,CAAP;AACAE,UAAAA,IAAI,GAAGZ,IAAI,CAACE,GAAL,CAASlC,OAAO,CAAC4B,QAAR,CAAiBG,CAA1B,EAA6Ba,IAA7B,CAAP;AACD,SALD;AAMA,YAAIf,CAAC,GAAG,CAACY,IAAI,GAAGC,IAAR,IAAgB,CAAxB;AACA,YAAIX,CAAC,GAAG,CAACY,IAAI,GAAGC,IAAR,IAAgB,CAAxB;AACA,aAAK1B,gBAAL,CAAsBtB,KAAtB,EAA2B,UAACI,OAAD,EAAa;AACtCA,UAAAA,OAAO,CAAC4B,QAAR,CAAiBC,CAAjB,GAAqBA,CAArB;AACA7B,UAAAA,OAAO,CAAC4B,QAAR,CAAiBG,CAAjB,GAAqBA,CAArB;AACA/B,UAAAA,OAAO,CAACmC,KAAR,GAAgB,CAAhB;AACD,SAJD;AAKD,OA9DyC,CA+D1C;AACA;AACA;AACA;;AAED;;;8BAESvC,G,EAAK;AACb,UAAMiD,aAAa,GAAG,EAAtB;AACA,WAAK3B,gBAAL,CAAsBtB,GAAtB,EAA2B,UAACI,OAAD,EAAa;AACtC6C,QAAAA,aAAa,CAACtC,IAAd,CAAmBP,OAAO,CAAC8C,KAA3B;AACD,OAFD;AAGA,UAAIC,KAAK,GAAG,KAAK9C,KAAL,CAAW+C,YAAX,CAAwB;AAAE7C,QAAAA,YAAY,EAAER;AAAhB,OAAxB,CAAZ;AACAoD,MAAAA,KAAK,CAACjD,OAAN,CAAc,UAACE,OAAD,EAAa;AACzB,YAAIiD,KAAK,GAAG,CAAZ,CADyB,CACV;;AACf,YAAIC,KAAK,GAAG,KAAZ;AACAL,QAAAA,aAAa,CAAC/C,OAAd,CAAsB,UAACqD,GAAD,EAAS;AAC7B,cAAInD,OAAO,CAAC8C,KAAR,GAAgBK,GAApB,EAAyB;AACvB,cAAEF,KAAF;AACD,WAFD,MAEO,IAAIjD,OAAO,CAAC8C,KAAR,KAAkBK,GAAtB,EAA2B;AAChCD,YAAAA,KAAK,GAAG,IAAR;AACD;AACF,SAND;;AAOA,YAAIA,KAAJ,EAAW;AACTlD,UAAAA,OAAO,CAAC8C,KAAR,GAAiBC,KAAK,CAACK,MAAN,GAAeP,aAAa,CAACO,MAA9B,GAAwCH,KAAxD;AACD,SAFD,MAEO;AACLjD,UAAAA,OAAO,CAAC8C,KAAR,IAAiBG,KAAjB;AACD;AACF,OAfD;AAgBD;;;wBArHuB;AAAE,aAAOI,UAAU,CAACD,MAAlB;AAA2B;;;;EAVVE,mB","sourcesContent":["import { GameEngine, BaseTypes, DynamicObject, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Card from './Card';\n\n// /////////////////////////////////////////////////////////\n//\n// GAME ENGINE\n//\n// /////////////////////////////////////////////////////////\nexport default class CovidGameEngine extends GameEngine {\n\n  constructor(options) {\n    super(options);\n    //this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this, collisions: { autoResolve: false }});\n\n    // common code\n    this.on('postStep', this.gameLogic.bind(this));\n  }\n\n  static get CardsCount() { return SetOfCards.length; }\n\n  registerClasses(serializer) {\n    serializer.registerClass(Card);\n  }\n\n  gameLogic() {\n    // Called every postStep\n    // Nothing to do???\n  }\n\n  forEachValidCard(ids, functor) {\n    ids.forEach((id) => {\n      const cardObj = this.world.queryObject({id : id, instanceType: Card});\n      if (cardObj)\n        functor(cardObj);\n    });\n  }\n\n  getIds(commaSeparatedId) {\n    let ids = [];\n    commaSeparatedId.split(\",\").forEach((idStr) => { ids.push(parseInt(idStr)); });\n    return ids;\n  }\n\n  processInput(inputData, playerId, isServer) {\n    super.processInput(inputData, playerId);\n\n    let input = inputData.input.split(\" \");\n    if (isServer) console.log(input);\n\n    const action = input.shift();\n    if (action === \"flip\") {\n      // flip the cards that have the same side visible as the first id\n      let sideToFlip = null;\n      this.forEachValidCard(this.getIds(input.shift()), (cardObj) => {\n        if (sideToFlip === null) {\n          sideToFlip = cardObj.side;\n        }\n        if (cardObj.side === sideToFlip)\n          cardObj.flip();\n      });\n    } else if (action === \"top\") {\n      let ids = this.getIds(input.shift());\n      this.moveToTop(ids);\n    } else if (action === \"move\") {\n      const delta = input.shift().split(\",\");\n      const dx = parseFloat(delta[0]);\n      const dy = parseFloat(delta[1]);\n      this.forEachValidCard(this.getIds(input.shift()), (cardObj) => {\n        const px = cardObj.position.x + dx;\n        const py = cardObj.position.y + dy;\n        cardObj.position.x = Math.min(Math.max(px, 1), 800-1);\n        cardObj.position.y = Math.min(Math.max(py, 1), 800-1);\n      });\n    } else if (action === \"orientation\") {\n      const angle = parseFloat(input.shift());\n      this.forEachValidCard(this.getIds(input.shift()), (cardObj) => {\n        cardObj.angle = angle;\n      });\n    } else if (action == \"rotate\") {\n      const deltaAngle = parseFloat(input.shift());\n      this.forEachValidCard(this.getIds(input.shift()), (cardObj) => {\n        if (deltaAngle < 0)\n          cardObj.turnLeft(-deltaAngle);\n        else\n          cardObj.turnRight(deltaAngle);\n      });\n    } else if (action == \"randomize\") {\n      let ids = this.getIds(input.shift());\n      this.emit(\"executeCommand\", {cmd:\"randomize\", ids: ids});\n    } else if (action == \"gather\") {\n      let xmin = 800, xmax = 0, ymin = 800, ymax = 0;\n      let ids = this.getIds(input.shift());\n      this.forEachValidCard(ids, (cardObj) => {\n        xmin = Math.min(cardObj.position.x, xmin);\n        ymin = Math.min(cardObj.position.y, ymin);\n        xmax = Math.max(cardObj.position.x, xmax);\n        ymax = Math.max(cardObj.position.y, ymax);\n      });\n      let x = (xmin + xmax) / 2;\n      let y = (ymin + ymax) / 2;\n      this.forEachValidCard(ids, (cardObj) => {\n        cardObj.position.x = x;\n        cardObj.position.y = y;\n        cardObj.angle = 0;\n      });\n    }\n    //  inputData.rearrange\n    //   gather(or spread)?+set orientation\n    //  inputData.zoom\n    //   zoom card\n\n  }\n\n  moveToTop(ids) {\n    const orderToUpdate = [];\n    this.forEachValidCard(ids, (cardObj) => {\n      orderToUpdate.push(cardObj.order);\n    });\n    let cards = this.world.queryObjects({ instanceType: Card });\n    cards.forEach((cardObj) => {\n      let count = 0; // number of card to update that has a greater order value.\n      let found = false;\n      orderToUpdate.forEach((otu) => {\n        if (cardObj.order > otu) {\n          ++count;\n        } else if (cardObj.order === otu) {\n          found = true;\n        }\n      });\n      if (found) {\n        cardObj.order = (cards.length - orderToUpdate.length) + count;\n      } else {\n        cardObj.order -= count;\n      }\n    });\n  }\n}\n"],"file":"CovidGameEngine.js"}